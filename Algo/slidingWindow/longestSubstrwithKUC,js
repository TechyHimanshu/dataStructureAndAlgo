// Longest Substring with At Least K Repeating Characters

const s = "ababbcaabbb";
const k = 2

function longestSubstring(s, k) {
    let n = s.length
    if (n == 0 || n < k)
        return 0;
    if (k == 1)
        return n;
    let obj = {};
    for (let i of s) {
        obj[i] = obj[i] ? obj[i] + 1 : 1
    }
    let ctr = 0
    while (ctr < n && obj[s[ctr]] >= k) ctr++
    if (ctr >= n-1) return ctr;
    let ls1 = longestSubstring(s.substring(0, ctr), k)
    while (ctr < n && obj[s[ctr]] < k) ctr++
    let ls2 = (ctr < n) ? longestSubstring(s.substring(ctr), k) : 0;

    return Math.max(ls1, ls2);

}

console.log(longestSubstring(s, k))
// abcacda <-> adccba